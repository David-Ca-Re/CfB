%function ExcelToMIDcore('ExcelFile','DoMean','Protocol', 'DataFile','IonArg012')
    %ExcelFile='ExcelToMIDcore.xlsx';
    ExcelFile='20190613_Results_flux_Ivan-COPY_1.xlsx';
    Protocol='LC-MS1'; 
    %ExcelFile='20190613_Results_flux_Ivan-COPY_1.xlsx';
    %Protocol='LC-MS1'; 
    DoMean=1;
    IonArg=1;
    DataFile='ExcelToMIDcore-RawDataInfo.xlsx';
    
    T = readtable(ExcelFile, 'Sheet',1); %,'ReadVariableNames', true);
    [rown, colLength]=size(T);
    molecules_info=readtable(DataFile,'Sheet',1);
    shortFormName=molecules_info(:,1);

    %To replace 'N/A' by '0'
    T2=table2array(T);
    [a1, b1]=size(T2);
    Data1=T;
    [a2, b2]=size(Data1);
    Data2=Data1;
    for j=1:rown
        for i=1:colLength
           Data2{j,i}=replace(Data1{j,i},'N/A','0');
        end
    end
    
    [num,txt,raw]=xlsread(ExcelFile);
    Names=string(txt(1,:));
    
    for i=5:length(Names)
        s=split(Names(i),'-');
        if regexp(Names(i),'-L');
            N(i)= strcat(s(1),string('-'),s(2)); % previous not working: N(i)= strcat(s(1),"-",s(2)); %
        elseif regexp(Names(i),'-D');
           N(i)= strcat(s(1),string('-'),s(2)); % previous not working: N(i)= strcat(s(1),"-",s(2));
        elseif regexp(Names(i),'-C');
           N(i)=strcat(s(1),string('-'),s(2)); % previous not working: N(i)=strcat(s(1),"-",s(2));
        else
        %Add another one for -D
            N(i)=s(1);
        end
    end

    
    N1=N(:,5:end);
    N1=regexprep(regexprep(regexprep(regexprep(regexprep(regexprep(regexprep(regexprep(regexprep(regexprep(N1,string('_m9$'),string('_m09')),string('_m8$'),string('_m08')),string('_m7$'),string('_m07')),string('_m6$'),string('_m06')),string('_m5$'),string('_m05')),string('_m4$'),string('_m04')),string('_m3$'),string('_m03')),string('_m2$'),string('_m02')),string('_m1$'),string('_m01')),string('_m0$'),string('_m00'));
    [~,ia,~] =unique(N1);
    NamesUni=N1(ia);
%   NamesUni=sort(N1);
    D=zeros(size(num,1),size(NamesUni,2)); % this new code avoids the need of removing the columns with all elements= 0 which introduce errors
    for n=1:length(NamesUni)
        nthIsotopologe=num.*ismember(N1,NamesUni(n));
        nthIsotopologe(isnan(nthIsotopologe))=0;
        nthIsotopologe=sum(nthIsotopologe,2);
        D(:,n)=nthIsotopologe;
    end

    %Commer checking and Data Arrangements, NewTable will be the new table
    %with the correct data to work with
    
    
    %THE DATA NEEDS TO BE THE ONE JUST BUILT
    
    experiments=Data2{:,2};
    %This will extract the commercial line (commer --> COLD)
%   commercial=Data2(not(cellfun(@isempty,regexp(experiments,'Cold'))),:);
%   newTable1 = Data2(not(cellfun(@isempty,regexp(experiments,'S01'))),:);
%   newTable2 = Data2(cellfun(@isempty,regexp(experiments,'S01')),:);
    commercial=not(cellfun(@isempty,regexp(experiments(3:end),'Cold')));
    newTable1 = D(find(not(cellfun(@isempty,regexp(experiments(3:end),'T01')))),:);
    newTable2 = cellfun(@isempty,regexp(experiments(3:end),'T01'));
    newTable2 = D(find(logical(newTable2 - commercial)),:);
    
    commercial=D(find(commercial));   
    NewTable = [commercial; newTable1; newTable2];
    Exp=experiments(3:end);
    H1=Exp(find(not(cellfun(@isempty,regexp(experiments(3:end),'T01')))),:);
    H1=replace(H1,'T01','natural');
    H2=cellfun(@isempty,regexp(experiments(3:end),'T01'));
    comm=not(cellfun(@isempty,regexp(experiments(3:end),'Cold')));
    H2=Exp(find(logical(H2 - comm)),:);
    
    
    comm=Exp(find(comm));
    
    %Mean calculations if required
    %%% IMPORTANT!!!!! ---> Reordenar el vector expHeaders o experiments
    %%% tal com estan reordenades les fileres a Newtable i modificant tots
    %%% els samples que tinguin S01 per Natural
    %CHECK IF THE FIRST PART AND THE LAST ONE ARE THE SAME, do
    %the mean of those
    
    expHeaders=vertcat(comm,H1,H2);
    
    %NameUnique=unique(SampleNames); %RE-DO THIS WITH INITIAL AND BIOLOGICAL REPLICATE AND CONDITIONS
    
%     if DoMean==1   
%         for iii=1:size(expHeaders,1)
%             BioName(iii,1)=extractBefore(string(expHeaders{iii,1}),4);
%             Condition(iii,1)=extractAfter(string(expHeaders{iii,1}),3);
%        %     SampleNames(iii,1)=strcat(BioName+"\w\w\w"+Condition);
%         end
%         BioNameUnique=unique(BioName);
%         ConditionUnique=unique(Condition);
% 
%         y=1;
%         Means=zeros(size(num,1),size(NewTable,2));
%         for cond=1:length(ConditionUnique)
%             D_1=zeros(size(BioNameUnique,1),size(NewTable,2));
%             
%             for expn=1:length(BioNameUnique)
%                 FullName=strcat(BioNameUnique(expn),ConditionUnique(cond));
%                 D_1(expn,:)=D(ismember(expHeaders,FullName),:);
%                 if expn==1
%                   rowpos=find(ismember(expHeaders,FullName));
%                 elseif expn>1
%                   rowDelete(y,1)=find(ismember(expHeaders,FullName));
%                   y=y+1;
%                 end
%             end
%             Means(rowpos,:)=mean(D_1);
%             
%         end
%         Means(rowDelete,:)=[];     
%         %expHeaders=strcat('S01',position);
%         expHeaders(rowDelete,:)=[];
%         MeanTable=[expHeaders string(Means)];
%     end
    
    expHeaders=vertcat(comm,H1,H2);
    if DoMean==1
        for iii=1:size(expHeaders,1)
            Condition(iii,1)=extractAfter(string(expHeaders{iii,1}),3);
        end
        ConditionUnique=unique(Condition);
        for i=1:length(ConditionUnique)
            ithCond=ConditionUnique(i);
            DMean(i,:)=mean(D(find(not(cellfun(@isempty,regexp(expHeaders,ithCond)))),:));
            expHeaderMean(i,:)= strcat(string('SMN'),ConditionUnique(i)); % sample number is replace by SMN for the mean of the samples
        end
        MeanTable=[expHeaderMean string(DMean)];
    end
    
        
        
    %     for cond=1:length(ConditionUnique)
    %         for expn=1:length(BioNameUnique)           
    %             Means(,:)=mean(D(ismember(expHeaders,strcat(BioNameUnique,ConditionUnique(cond))),:));
    %         end
    %     end

%     Data=NewTable(:,5:end);
%     DataArray=Data{:,:};
%     %if DoMean==1
%         Means=zeros(size(NameUnique,1),width(Data));
%         for replicates=1:size(NameUnique,1)
%             
%             %DataLineCell=table2cell(Data(ismember(expHeaders,NameUnique(replicates,1)),:));
%             DataLineCell=table2cell(Data(regexp(expHeaders,NameUnique(replicates,1)),:));
%             for columns=1:width(Data)
%                 AmountReplicates=height(expHeaders)/size(NameUnique,1);
%                 position=find(ismember(expHeaders,NameUnique(replicates,1)))/AmountReplicates;
%                 Means(position(2),columns)=mean(cellfun(@str2num ,DataLineCell(:,columns),'UniformOutput',1));
%             end
%         end
%         %ExpTitles=array2table(zeros(height(NameUnique),1));
%         pos2=1:1:height(NameUnique);
%         pos=1:AmountReplicates:height(expHeaders);
%         ExpTitles(pos2,1)=expHeaders(pos,1);   
%         MeanTable=[ExpTitles array2table(Means)];
%     end

    %To clean the names of the molecules
    moleculesUnique=unique(table2cell(Data2(1,5:colLength)));
    moleculesInChar=char(moleculesUnique);
    for i=1:length(moleculesUnique)
        splitted=split(moleculesUnique{1,i},'-');
        molUniqueModified(i,1)=lower(splitted(1));
    end
    
    %To extract each molecule in an txt file
    %First create a dir where the files will be added
    %mkdir molecules_MIDcore
    %folderPath=strcat(pwd,"/molecules_MIDcore");
    
    excel_title=Data2{1,1:colLength};
%     splitN1
%     N
%     for name=1:size(N1,1)
%         sp=split(N1(name),"_");
% %         if regexp(sp(1),"-")
% %             sp=split(sp(1),"-");
% %         end
%         N1_1(1,name)=sp(1);
%     end
    
    for i=1:length(moleculesUnique)
    %for i=28
        %This is to search in molecules_info
        molecule=molUniqueModified{i,:};
        %This is to search in NewTable or Means
        molecule_A=string(strip(moleculesInChar(i,:)));

        %HEAD 
        
        %row is the ismember+protocol in row,12
        %for the rows with 1, another ismember with protocol
        row=find(ismember(shortFormName{:,:},lower(molecule)));
        carbonsNumber=molecules_info{row,8};
        fragment=molecules_info{row,3};
        sulfurNumber=molecules_info{row,5};
        siliciumNumber=molecules_info{row,6};
        Carbons=table("carbons",string(carbonsNumber));
        Fragment=table("fragment",string(fragment));
        Silicum=table("silicum",string(siliciumNumber));
        Sulfur=table("sulfur",string(sulfurNumber));
        Head=vertcat(Carbons,Fragment,Silicum,Sulfur);

        
        
        mz=zeros(1,carbonsNumber+1);
        mz(1,1)=molecules_info{row,2};
        MZ=table(zeros(1,1));
        MZ{1,1}=mz(1,1);
        for value=2:carbonsNumber+1
             mz(1,value)=mz(1,value-1)+1;
             MZ{1,value}=string(mz(1,value));
        end
        BodyHeader=table("m/z",string(MZ{:,:}));
        
        %BODY
        A=zeros(rown,1);
        if DoMean==0
            A=NewTable(:,not(cellfun(@isempty, regexp(NamesUni,molecule_A))));
            newExpTitles=expHeaders;
        elseif DoMean==1
            A=DMean(:,not(cellfun(@isempty, regexp(NamesUni,molecule_A)))); %check that the values are correct!
            newExpTitles=expHeaderMean;
        end
        %newExpTitles{end,end}=table2cell(table(strcat("final",newExpTitles{end,end})));
        %not needed anymore
        A_final=[newExpTitles string(A)];
        %This creates a string array
        
       
        
        
       %Check if there is no row with commer data or the row are zeros in
       %order to generate the commer asuming a Binomial Distribution
        if isempty(commercial)==1 || commercial(1,1)==0
            %This is the case where there is no row on commer (like in LC)
            x=0:(carbonsNumber);
            pdf1=binopdf(x,carbonsNumber,0.01); %1% of carbon is labelled
            commer=zeros(1,1);
            %commer(1)=pdf1(1)*mean(cellfun(@str2num, newTable1{:,5}));
            commer(1)=pdf1(1)*mean(newTable1(:,1));
            for iii=2:length(pdf1)
                commer(iii)=(pdf1(iii)*commer(1))/pdf1(1);
            end
            commer_vector=table(zeros(1,1));
            for ii=1:length(commer)
                commer_vector{1,ii}=commer(ii);
            end
            commer_line=table("commer",string(commer_vector{:,:}));
        end
  
        
        %It has to be all negative to enter to MIDcore (CfB is positive)
        %for future improvement, MIDcore should be changed to not only
        %accept negative ionization
        
        %IONIZATION
        if IonArg==0 
            %Neutral Add a new column with zeros to the left
            [r, c]=size(A);
            newCol=zeros(r,1);
            A_final=[newExpTitles newCol string(A)];
            
            %Repartir la carrega
            
            
            %Opcio1: tot zeros
            %Opcio2: mirar exemples i pposar ratio m-1/m0 (DIVIDIR M-1/M0 * 100
                %NOSTRES DADES M(MAX)/M0 * 100)
            %Opcio3: buscar valor minim que no afecti (en relació a Opció2)
        elseif IonArg==1
            %Positive change the BodyHeader
            mz=mz-1;
            MZ=string(mz);
            BodyHeader=table("m/z",string(MZ));
        elseif IonArg==2
            %Negative --> Do nothing for now
            
        end


        
        %TO PRINT IN AN OUTFILE       
    
        molName=strcat(molecule,".txt");
        fileID = fopen(molName,"w");
        [rown, ~]=size(Head);
        for row = 1:rown
            fprintf(fileID,"%s \t %s \n",string(Head{row,:}));
        end
        fclose("all");

        fileID = fopen(molName,"a");
        [rown, ~]=size(BodyHeader);
        for row = 1:rown
            fprintf(fileID,"%s \t",string(BodyHeader{row,:}));
            fprintf(fileID,"\n");
        end
        fclose("all");
        
        fileID = fopen(molName,"a");
        [rown, ~]=size(commer_line);
        for row = 1:rown
            fprintf(fileID,"%s \t",string(commer_line{row,:}));
        end
        fprintf(fileID,"\n");
        fclose("all");
        
        fileID = fopen(molName,"a");
        [rown, coln]=size(A_final);
        for row = 1:rown
            fprintf(fileID,"%s \t",string(A_final(row,:)));
            fprintf(fileID,"\n");
        end
        fclose("all");
 
        %destination = fullfile(folderPath,fileID);
        %fileToMove=strcat(pwd,"/",molName);
        %copyfile(fileToMove,folderPath)
        
    end
    
    %To move all the files created (finish with.txt) to molecules_MIDcore
    %folder
    movefile *.txt molecules_MIDcore


%Run R script

% Rpath = 'C:\Program Files\R\R-3.1.1\bin';
% RscriptFileName = 'D:\test\lmm.R';
% RunRcode(RscriptFileName, Rpath);

%!Rscript your_script.r
%!C:\Program Files\R\R-2.14.1\bin\Rscript R-MIDcore.R
%path to R
%!/Users/s182286/opt/anaconda3/Applications/RStudio.app R-MIDcore.R
%or just >> RunRcode(RscriptFileName)

%mkdir....
%movefile *_c output_MIDcore



